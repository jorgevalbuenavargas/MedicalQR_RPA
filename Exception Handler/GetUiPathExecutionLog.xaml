<Activity mc:Ignorable="sap sap2010" x:Class="GetUiPathExecutionLog" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Diagnostics;assembly=System" xmlns:si="clr-namespace:System.IO;assembly=mscorlib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_dicConfig" Type="InArgument(scg:Dictionary(x:String, x:String))" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>546,1162</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>GetUiPathExecutionLog_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="21">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="22">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.Configuration.Install</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="GetUiPathExecutionLog" sap:VirtualizedContainerService.HintSize="526,1102" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="str_appDataPath" />
      <Variable x:TypeArguments="x:String" Name="str_uipathLogsFolderPath" />
      <Variable x:TypeArguments="x:String" Name="str_executionLogFileName" />
      <Variable x:TypeArguments="x:String" Name="str_uipathExecutionLogFilePath" />
      <Variable x:TypeArguments="sd:Stopwatch" Default="[New Stopwatch()]" Name="stopwatchFlow" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Inicio de Cronómetro del flujo GetUiPathExecutionLog" DisplayName="Invoke ChronometerReset workflow - GetUiPathExecutionLog" sap:VirtualizedContainerService.HintSize="484,118" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_2" UnSafe="False" WorkflowFileName="Chronometer\ChronometerReset.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="in_str_Name">GetUiPathExecutionLog</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_str_ParentName">Exception Handler</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_str_State">Executing</InArgument>
        <InOutArgument x:TypeArguments="sd:Stopwatch" x:Key="io_stopwatchState">[stopwatchFlow]</InOutArgument>
      </ui:InvokeWorkflowFile.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeWorkflowFile>
    <ui:GetEnvironmentFolder DisplayName="Get Environment Folder - Get the AppData Folder Path" FolderPath="[str_appDataPath]" sap:VirtualizedContainerService.HintSize="484,61" sap2010:WorkflowViewState.IdRef="GetEnvironmentFolder_1" SpecialFolder="LocalApplicationData" />
    <Assign DisplayName="Assign - Get the UiPath Logs Folder Path" sap:VirtualizedContainerService.HintSize="484,60" sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[str_uipathLogsFolderPath]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String" xml:space="preserve">[str_appDataPath  + "\UiPath\Logs"]</InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Assign - Get the Execution Log's Name" sap:VirtualizedContainerService.HintSize="484,60" sap2010:WorkflowViewState.IdRef="Assign_2">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[str_executionLogFileName]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[DateTime.Now.ToString("yyyy-MM-dd") + "_Execution.log"]</InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Assign - Get the Execution Log File" sap:VirtualizedContainerService.HintSize="484,60" sap2010:WorkflowViewState.IdRef="Assign_3">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[str_uipathExecutionLogFilePath]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[Directory.EnumerateFiles(str_uipathLogsFolderPath, "*.*", SearchOption.AllDirectories).Where(Function (file) file.EndsWith(str_executionLogFileName)).ToArray(0)]</InArgument>
      </Assign.Value>
    </Assign>
    <If Condition="[Not String.IsNullOrEmpty(str_uipathExecutionLogFilePath)]" DisplayName="If - There is an Execution Log File" sap:VirtualizedContainerService.HintSize="484,282" sap2010:WorkflowViewState.IdRef="If_1">
      <If.Then>
        <InvokeMethod DisplayName="Invoke Method - Copy Execution Log File in Logs Folder" sap:VirtualizedContainerService.HintSize="238,134" sap2010:WorkflowViewState.IdRef="InvokeMethod_1" MethodName="Copy" TargetType="si:File">
          <InArgument x:TypeArguments="x:String">[str_uipathExecutionLogFilePath]</InArgument>
          <InArgument x:TypeArguments="x:String">[in_dicConfig("logsFolder") + "\" + str_executionLogFileName]</InArgument>
          <InArgument x:TypeArguments="x:Boolean">True</InArgument>
        </InvokeMethod>
      </If.Then>
    </If>
    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Detención del cronómetro del flujo GetUiPathExecutionLog" DisplayName="Invoke ChronometerStop workflow - GetUiPathExecutionLog" sap:VirtualizedContainerService.HintSize="484,129" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="Chronometer\ChronometerStop.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="in_str_Name">GetUiPathExecutionLog</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_str_ParentName">Exception Handler</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_str_State">Successful</InArgument>
        <InOutArgument x:TypeArguments="sd:Stopwatch" x:Key="io_stopwatchState">[stopwatchFlow]</InOutArgument>
      </ui:InvokeWorkflowFile.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeWorkflowFile>
  </Sequence>
</Activity>